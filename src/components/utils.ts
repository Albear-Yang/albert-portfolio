import pointInPolygon from "point-in-polygon";


export type Pt = { x: number; y: number };

export function dist2(a: Pt, b: Pt) {
  const dx = a.x - b.x;
  const dy = a.y - b.y;
  return dx * dx + dy * dy;
}

export function easeInOutCubic(t: number) {
  return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
}
var letter_A = [[23.442, 9.542], [23.314, 9.748], [22.704, 11.267], [22.087, 12.917], [21.469, 14.567], [20.906, 16.067], [20.835, 16.25], [20.765, 16.433], [20.576, 16.921], [20.417, 17.333], [20.257, 17.746], [20.067, 18.233], [19.994, 18.417], [19.498, 19.66], [16.614, 27.313], [16.399, 27.957], [16.253, 28.393], [16.038, 28.975], [15.922, 29.25], [15.588, 30.04], [14.919, 31.773], [14.249, 33.583], [13.445, 35.755], [12.873, 37.276], [12.587, 38.0], [12.46, 38.321], [12.081, 39.333], [11.744, 40.25], [11.407, 41.167], [11.038, 42.142], [10.924, 42.417], [10.81, 42.692], [10.622, 43.179], [10.505, 43.5], [10.389, 43.821], [10.202, 44.308], [10.089, 44.583], [9.976, 44.858], [9.79, 45.346], [9.675, 45.667], [9.56, 45.987], [9.408, 46.4], [9.336, 46.583], [9.265, 46.767], [9.093, 47.217], [8.955, 47.583], [8.817, 47.95], [8.514, 48.737], [8.283, 49.333], [8.052, 49.929], [7.662, 50.979], [7.415, 51.667], [7.169, 52.354], [6.874, 53.142], [6.759, 53.417], [6.644, 53.692], [6.455, 54.179], [6.339, 54.5], [6.223, 54.821], [6.035, 55.308], [5.922, 55.583], [5.809, 55.858], [5.622, 56.346], [5.505, 56.667], [5.389, 56.987], [5.185, 57.498], [5.052, 57.8], [4.919, 58.103], [4.768, 58.609], [4.716, 58.925], [4.623, 59.5], [10.103, 59.497], [15.867, 59.495], [15.887, 59.492], [16.071, 58.833], [16.135, 58.604], [16.252, 58.267], [16.331, 58.083], [16.41, 57.9], [16.6, 57.375], [16.755, 56.917], [16.909, 56.458], [17.1, 55.933], [17.179, 55.75], [17.257, 55.567], [17.472, 54.967], [17.655, 54.417], [17.838, 53.867], [18.259, 52.667], [18.592, 51.75], [18.924, 50.833], [19.273, 49.821], [19.366, 49.5], [19.674, 48.436], [19.056, 48.5], [29.077, 48.5], [38.281, 48.5], [38.716, 49.625], [38.955, 50.244], [39.202, 50.975], [39.265, 51.25], [39.328, 51.525], [39.423, 51.825], [39.477, 51.917], [39.613, 52.148], [41.478, 57.601], [41.7, 58.417], [42.013, 59.563], [41.65, 59.5], [47.937, 59.5], [54.221, 59.5], [54.025, 59.534], [53.519, 58.539], [53.218, 57.948], [51.333, 52.969], [51.333, 52.766], [51.333, 52.629], [50.92, 51.635], [50.653, 51.127], [50.569, 50.968], [50.5, 50.754], [50.5, 50.652], [50.5, 50.55], [50.395, 50.231], [50.268, 49.942], [50.14, 49.653], [49.76, 48.667], [49.423, 47.75], [49.086, 46.833], [48.709, 45.821], [48.586, 45.5], [48.462, 45.179], [48.087, 44.167], [47.752, 43.25], [47.041, 41.303], [46.85, 40.795], [46.283, 39.333], [46.051, 38.737], [45.587, 37.5], [45.25, 36.583], [44.914, 35.667], [44.538, 34.654], [44.414, 34.333], [44.291, 34.012], [43.914, 33.0], [43.577, 32.083], [43.24, 31.167], [42.868, 30.192], [42.749, 29.917], [42.63, 29.642], [42.42, 29.079], [42.282, 28.667], [42.144, 28.254], [41.954, 27.729], [41.86, 27.5], [41.766, 27.271], [41.415, 26.333], [41.08, 25.417], [40.744, 24.5], [40.411, 23.6], [40.338, 23.417], [39.985, 22.523], [39.621, 21.557], [38.832, 19.417], [38.359, 18.133], [37.911, 16.933], [37.836, 16.75], [37.762, 16.567], [37.606, 16.154], [37.492, 15.833], [37.377, 15.512], [37.192, 15.025], [37.08, 14.75], [36.968, 14.475], [36.483, 13.2], [36.002, 11.917], [34.863, 8.876], [35.587, 9.167], [29.139, 9.167], [23.674, 9.167], [23.442, 9.542]]
var letter_B = [[57.355, 9.39], [57.215, 9.559], [57.177, 16.095], [57.208, 34.518], [57.25, 59.417], [62.25, 59.417], [67.25, 59.417], [67.25, 34.333], [67.25, 9.25], [62.397, 9.206], [58.449, 9.17], [57.51, 9.204], [57.355, 9.39]]
var letter_C = [[75.187, 9.393], [75.049, 9.559], [75.01, 16.254], [75.041, 34.518], [75.083, 59.417], [79.822, 59.461], [85.318, 59.512], [84.855, 59.694], [84.82, 57.5], [84.781, 55.134], [84.764, 55.189], [85.308, 55.933], [87.23, 58.563], [90.15, 59.959], [94.548, 60.35], [101.916, 61.005], [107.108, 57.872], [110.181, 50.917], [110.527, 50.135], [110.656, 49.729], [111.254, 47.548], [113.174, 40.548], [111.228, 31.194], [106.872, 26.489], [101.823, 21.036], [92.048, 20.614], [86.839, 25.625], [86.149, 26.289], [85.523, 26.813], [85.449, 26.789], [85.376, 26.764], [85.321, 22.987], [85.329, 18.394], [85.337, 13.192], [85.279, 9.879], [85.175, 9.605], [85.008, 9.167], [80.191, 9.167], [76.339, 9.167], [75.337, 9.212], [75.187, 9.393]]
var letter_D = [[230.549, 9.445], [230.491, 9.598], [230.558, 9.916], [230.7, 10.153], [230.841, 10.39], [234.052, 15.721], [237.835, 22.0], [241.618, 28.279], [244.954, 33.829], [245.247, 34.333], [245.54, 34.837], [246.316, 36.112], [246.971, 37.167], [247.626, 38.221], [248.294, 39.346], [248.456, 39.667], [248.725, 40.201], [248.753, 41.055], [248.79, 49.75], [248.812, 54.975], [248.831, 59.307], [248.832, 59.377], [248.833, 59.447], [251.327, 59.485], [254.375, 59.461], [259.917, 59.417], [259.96, 49.87], [260.003, 40.323], [262.932, 35.453], [264.543, 32.775], [266.378, 29.721], [267.01, 28.667], [267.643, 27.613], [268.232, 26.637], [268.319, 26.5], [268.596, 26.066], [270.069, 23.615], [270.421, 23.003], [270.606, 22.681], [270.878, 22.229], [271.024, 22.0], [271.281, 21.596], [272.762, 19.155], [275.573, 14.5], [276.32, 13.262], [277.289, 11.659], [277.726, 10.938], [278.163, 10.216], [278.48, 9.522], [278.432, 9.396], [278.309, 9.075], [266.538, 9.055], [266.135, 9.375], [265.922, 9.545], [262.817, 14.694], [261.036, 17.832], [260.802, 18.244], [260.361, 18.971], [260.055, 19.449], [259.75, 19.927], [259.5, 20.362], [259.5, 20.417], [259.5, 20.471], [259.242, 20.92], [258.926, 21.413], [258.444, 22.167], [257.611, 23.581], [256.765, 25.083], [256.662, 25.267], [256.459, 25.604], [256.315, 25.833], [256.17, 26.063], [255.759, 26.755], [255.401, 27.372], [255.043, 27.989], [254.637, 28.495], [254.5, 28.496], [254.26, 28.498], [254.139, 28.328], [253.201, 26.668], [252.968, 26.256], [252.528, 25.529], [252.222, 25.051], [251.917, 24.573], [251.667, 24.141], [251.667, 24.09], [251.667, 24.038], [251.292, 23.398], [250.833, 22.667], [250.375, 21.935], [250.0, 21.305], [250.0, 21.265], [250.0, 21.225], [249.625, 20.588], [249.167, 19.849], [248.708, 19.11], [248.333, 18.472], [248.333, 18.431], [248.333, 18.39], [247.86, 17.583], [247.281, 16.637], [245.043, 12.98], [244.167, 11.486], [244.167, 11.33], [244.167, 11.24], [244.11, 11.167], [244.041, 11.167], [243.971, 11.167], [243.814, 10.938], [243.69, 10.659], [243.566, 10.379], [243.279, 9.929], [243.051, 9.659], [242.637, 9.167], [236.647, 9.167], [231.207, 9.167], [230.646, 9.192], [230.549, 9.445]]
var letter_E = [[193.111, 12.278], [193.05, 12.339], [193.0, 14.776], [193.0, 17.694], [193.0, 20.612], [192.981, 23.014], [192.958, 23.032], [192.935, 23.049], [191.567, 23.106], [189.917, 23.157], [186.917, 23.25], [186.871, 26.296], [186.811, 30.323], [186.522, 29.982], [190.045, 30.038], [192.917, 30.083], [193.008, 41.75], [193.104, 53.983], [193.113, 54.131], [193.878, 55.659], [195.467, 58.83], [198.465, 59.89], [205.6, 59.803], [211.075, 59.736], [210.501, 60.219], [210.497, 55.688], [210.494, 51.449], [210.527, 51.548], [209.238, 51.807], [207.368, 52.183], [205.106, 51.903], [204.233, 51.189], [203.241, 50.378], [203.25, 50.487], [203.25, 39.833], [203.25, 30.083], [206.654, 30.038], [210.914, 29.982], [210.517, 30.357], [210.462, 26.435], [210.417, 23.25], [206.833, 23.158], [204.862, 23.108], [203.231, 23.052], [203.208, 23.033], [203.185, 23.015], [203.167, 20.608], [203.167, 17.684], [203.167, 12.991], [203.136, 12.357], [202.903, 12.268], [202.543, 12.129], [193.25, 12.139], [193.111, 12.278]]
var letter_F = [[133.167, 22.176], [124.831, 22.962], [118.706, 28.241], [116.844, 36.243], [115.832, 40.589], [116.089, 45.515], [117.513, 49.083], [119.676, 54.505], [123.26, 57.982], [128.25, 59.498], [128.892, 59.693], [129.644, 59.922], [129.922, 60.007], [131.646, 60.535], [137.962, 60.525], [139.917, 59.992], [140.905, 59.722], [142.204, 59.323], [142.583, 59.173], [143.337, 58.876], [145.679, 57.663], [145.833, 57.49], [145.879, 57.439], [146.104, 57.27], [146.333, 57.113], [148.12, 55.896], [151.167, 51.664], [151.167, 50.401], [151.167, 50.0], [146.59, 50.0], [142.013, 50.0], [141.131, 50.708], [136.784, 54.202], [129.732, 53.206], [127.625, 48.801], [126.832, 47.142], [126.31, 44.513], [126.685, 44.062], [126.842, 43.872], [129.039, 43.833], [139.681, 43.833], [152.488, 43.833], [152.684, 43.468], [152.983, 42.91], [152.709, 39.101], [152.177, 36.417], [151.109, 31.019], [147.083, 25.601], [142.769, 23.75], [140.997, 22.991], [141.11, 23.028], [139.042, 22.51], [138.698, 22.424], [137.854, 22.309], [137.167, 22.254], [136.479, 22.199], [135.617, 22.128], [135.25, 22.098], [134.883, 22.067], [133.946, 22.102], [133.167, 22.176]]
var letter_G = [[178.5, 22.177], [174.501, 22.697], [171.272, 24.634], [169.174, 27.772], [168.167, 29.277], [168.181, 29.302], [168.127, 25.917], [168.083, 23.25], [163.208, 23.206], [158.332, 23.162], [158.374, 41.289], [158.417, 59.417], [163.5, 59.417], [168.583, 59.417], [168.681, 49.833], [168.79, 39.048], [168.829, 38.644], [169.97, 36.367], [170.972, 34.367], [172.491, 33.009], [174.725, 32.116], [175.48, 31.814], [175.966, 31.771], [178.75, 31.756], [181.917, 31.74], [181.964, 27.412], [182.02, 22.172], [182.062, 22.404], [181.043, 22.257], [180.607, 22.194], [180.1, 22.119], [179.917, 22.089], [179.733, 22.06], [179.096, 22.1], [178.5, 22.177]]
var letter_H = [[289.5, 22.26], [280.536, 23.149], [275.921, 26.435], [274.829, 32.707], [274.495, 34.623], [274.178, 34.513], [279.882, 34.461], [284.75, 34.417], [284.985, 33.667], [285.532, 31.921], [285.738, 31.477], [286.304, 30.816], [288.577, 28.16], [295.753, 28.519], [297.109, 31.356], [299.14, 35.603], [297.059, 37.175], [288.083, 38.171], [284.074, 38.616], [280.257, 39.553], [278.795, 40.452], [278.453, 40.662], [278.106, 40.833], [278.024, 40.833], [276.897, 40.833], [274.323, 44.551], [273.756, 47.0], [272.37, 52.984], [275.39, 58.042], [281.505, 59.976], [285.908, 61.368], [293.256, 60.07], [297.058, 57.229], [298.122, 56.433], [298.333, 56.427], [298.333, 57.193], [298.333, 57.471], [298.451, 58.104], [298.595, 58.599], [298.857, 59.5], [303.901, 59.5], [309.335, 59.5], [309.266, 59.509], [308.921, 58.842], [308.06, 57.177], [307.832, 53.523], [307.83, 41.417], [307.829, 28.19], [307.889, 28.557], [305.335, 25.994], [304.178, 24.833], [302.046, 23.5], [301.346, 23.5], [301.238, 23.5], [300.935, 23.389], [300.672, 23.253], [299.793, 22.798], [296.485, 22.32], [292.833, 22.121], [292.146, 22.084], [290.646, 22.146], [289.5, 22.26]]
var letter_I = [[334.667, 22.241], [330.792, 22.823], [327.996, 24.324], [326.108, 26.836], [325.2, 28.044], [325.167, 27.988], [325.167, 25.234], [325.167, 23.162], [320.292, 23.206], [315.417, 23.25], [315.374, 41.149], [315.343, 54.349], [315.382, 59.107], [315.522, 59.276], [315.676, 59.462], [316.627, 59.497], [320.647, 59.461], [325.583, 59.417], [325.683, 48.417], [325.779, 37.72], [325.821, 36.881], [326.348, 35.0], [328.016, 29.045], [337.264, 28.34], [338.893, 34.043], [339.462, 36.034], [339.5, 36.903], [339.5, 47.934], [339.5, 54.005], [339.546, 59.091], [339.601, 59.236], [339.749, 59.621], [349.345, 59.637], [349.664, 59.253], [350.015, 58.831], [349.792, 34.216], [349.419, 32.25], [348.71, 28.503], [346.976, 25.364], [345.0, 24.246], [342.896, 23.057], [340.983, 22.441], [338.833, 22.26], [338.146, 22.203], [337.246, 22.127], [336.833, 22.092], [336.421, 22.057], [335.446, 22.124], [334.667, 22.241]]
var letter_J = [[369.75, 22.247], [367.879, 22.493], [366.266, 22.897], [365.714, 23.258], [365.511, 23.391], [365.257, 23.5], [365.149, 23.5], [364.776, 23.5], [362.185, 25.344], [361.211, 26.303], [354.29, 33.117], [354.281, 48.193], [361.194, 54.762], [363.171, 56.641], [365.148, 57.586], [368.667, 58.335], [369.731, 58.561], [373.892, 58.471], [374.917, 58.199], [375.283, 58.102], [375.888, 57.945], [376.26, 57.851], [378.214, 57.356], [381.099, 55.375], [382.008, 53.903], [382.566, 53.001], [382.667, 53.342], [382.667, 56.135], [382.668, 63.103], [380.14, 66.322], [374.667, 66.322], [372.367, 66.322], [370.373, 65.674], [369.13, 64.522], [368.446, 63.889], [368.198, 63.507], [367.577, 62.125], [367.295, 61.5], [362.314, 61.5], [357.333, 61.5], [357.333, 62.22], [357.333, 73.093], [378.909, 77.446], [388.209, 68.45], [389.565, 67.138], [391.333, 64.351], [391.333, 63.525], [391.333, 63.365], [391.403, 63.162], [391.489, 63.075], [391.689, 62.871], [391.965, 61.091], [392.172, 58.667], [392.27, 57.527], [392.319, 49.957], [392.293, 40.0], [392.25, 23.25], [387.458, 23.206], [382.667, 23.162], [382.667, 25.238], [382.667, 27.563], [382.566, 27.784], [381.937, 26.834], [380.24, 24.27], [377.361, 22.63], [373.917, 22.265], [371.76, 22.037], [371.361, 22.035], [369.75, 22.247]]
var avoid_A = [[29.676, 23.462], [29.877, 23.987], [30.101, 24.642], [30.174, 24.917], [30.248, 25.192], [30.805, 26.842], [31.412, 28.583], [32.02, 30.325], [32.878, 32.8], [33.32, 34.083], [33.761, 35.367], [34.363, 37.115], [34.658, 37.969], [35.43, 40.206], [35.988, 40.011], [28.963, 39.96], [21.933, 39.91], [22.609, 40.208], [23.574, 37.583], [23.912, 36.667], [24.288, 35.617], [24.41, 35.25], [24.533, 34.883], [24.908, 33.833], [25.244, 32.917], [25.58, 32.0], [25.954, 30.95], [26.076, 30.583], [26.198, 30.217], [26.686, 28.829], [27.159, 27.5], [27.633, 26.171], [28.158, 24.671], [28.326, 24.167], [29.021, 22.077], [29.127, 22.022], [29.676, 23.462]]
var avoid_B = [[94.667, 30.004], [97.344, 30.421], [100.115, 33.092], [100.87, 35.987], [101.41, 38.053], [101.551, 38.984], [101.62, 40.917], [101.696, 43.044], [101.664, 43.327], [101.042, 46.0], [98.706, 56.039], [86.763, 54.723], [85.159, 44.25], [83.81, 35.437], [88.116, 28.985], [94.667, 30.004]]
var avoid_C = [[136.583, 30.092], [139.232, 30.423], [141.966, 33.62], [142.204, 36.667], [142.25, 37.25], [134.51, 37.293], [130.253, 37.317], [126.705, 37.272], [126.626, 37.192], [126.169, 36.736], [127.352, 33.72], [128.478, 32.467], [130.442, 30.282], [132.733, 29.611], [136.583, 30.092]]
var avoid_D = [[376.715, 30.168], [381.677, 31.212], [384.301, 40.049], [381.441, 46.083], [378.601, 52.074], [370.497, 52.371], [367.604, 46.59], [365.811, 43.01], [365.907, 36.615], [367.799, 33.583], [368.655, 32.212], [370.512, 30.519], [371.175, 30.505], [371.317, 30.502], [371.514, 30.42], [371.612, 30.322], [372.028, 29.905], [375.036, 29.815], [376.715, 30.168]]
var avoid_E = [[297.808, 43.513], [298.03, 48.289], [296.061, 52.516], [293.34, 53.102], [293.107, 53.153], [292.713, 53.271], [292.465, 53.364], [291.104, 53.878], [286.862, 53.48], [285.637, 52.723], [282.44, 50.748], [283.979, 44.5], [287.662, 44.5], [287.837, 44.5], [288.02, 44.435], [288.069, 44.356], [288.118, 44.277], [288.442, 44.166], [288.788, 44.111], [289.134, 44.056], [290.167, 43.889], [291.083, 43.74], [292.0, 43.591], [293.125, 43.411], [293.583, 43.34], [294.878, 43.14], [296.193, 42.788], [296.833, 42.47], [297.668, 42.056], [297.743, 42.136], [297.808, 43.513]]

var good_letters = [letter_A, letter_B, letter_C, letter_D, letter_E, letter_F, letter_G, letter_H, letter_I, letter_J]
var bad_letters = [avoid_A, avoid_B, avoid_C, avoid_D, avoid_E]

// keep one immutable copy so transforms aren't cumulative
const _good_letters_orig = JSON.parse(JSON.stringify(good_letters)) as number[][][];
const _bad_letters_orig = JSON.parse(JSON.stringify(bad_letters)) as number[][][];

function align_letters(width: number, height: number) {
  const src = _good_letters_orig;
  const bsrc = _bad_letters_orig;

  let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
  for (const shape of src) {
    for (const p of shape) {
      if (p[0] < minX) minX = p[0];
      if (p[1] < minY) minY = p[1];
      if (p[0] > maxX) maxX = p[0];
      if (p[1] > maxY) maxY = p[1];
    }
  }
  const bboxWidth = maxX - minX;
  const bboxHeight = maxY - minY;
  if (bboxHeight === 0 || bboxWidth === 0) return; // guard

  const target_size_px = Math.max(0.24 * height, 0.12 * width);
  let scale_factor = Math.max(target_size_px / bboxHeight, target_size_px / width);

  const padding = 0.05;
  const usableW = width * (1 - 2 * padding);
  if (bboxWidth * scale_factor > usableW) {
    scale_factor = usableW / bboxWidth;
  }

  const centerX = width / 2;
  const centerY = height / 2;
  const bboxCenterX = (minX + maxX) / 2;
  const bboxCenterY = (minY + maxY) / 2;

  // write transformed coords into good_letters (keep references)
  for (let i = 0; i < src.length; ++i) {
    const s = src[i];
    const dst = good_letters[i];
    dst.length = 0; // clear so we can push new coords but keep array reference
    for (let j = 0; j < s.length; ++j) {
      const ox = s[j][0];
      const oy = s[j][1];
      const nx = (ox - bboxCenterX) * scale_factor + centerX;
      const ny = (oy - bboxCenterY) * scale_factor + centerY;
      dst.push([nx, ny]);
    }
  }

  for(let i = 0; i < bsrc.length; ++i){
    const b = bsrc[i];
    const dst = bad_letters[i]
    dst.length = 0;
    for(let j = 0; j < b.length; ++j){
      const ox = b[j][0];
      const oy = b[j][1]
      const nx = (ox - bboxCenterX) * scale_factor + centerX;
      const ny = (oy - bboxCenterY) * scale_factor + centerY;
      dst.push([nx, ny]);
    }
  }
}

function valid_point(p:Pt){
  var x = p.x
  var y = p.y
  const point = [x, y]
  for(var shape of good_letters){
    if(pointInPolygon(point, shape)){
      for(var bad_shape of bad_letters){
        if(pointInPolygon(point, bad_shape)){
          return false
        }
      }
      return true
    }
  }
  return false
}

export function poissonDisk(width: number, height: number, r:number, k:number) {
  const cellSize = r / Math.SQRT2;
  const cols = Math.ceil(width / cellSize);
  const rows = Math.ceil(height / cellSize);
  const grid: (Pt | null)[] = new Array(cols * rows).fill(null);

  const samples: Pt[] = [];
  const active: Pt[] = [];

  function gridIndex(p: Pt) {
    const gx = Math.floor(p.x / cellSize);
    const gy = Math.floor(p.y / cellSize);
    return gx + gy * cols;
  }

  function inRange(p: Pt) {
    return p.x >= 0 && p.y >= 0 && p.x < width && p.y < height;
  }

  function tooClose(p: Pt) {
    const gx = Math.floor(p.x / cellSize);
    const gy = Math.floor(p.y / cellSize);
    for (let i = -2; i <= 2; i++) {
      for (let j = -2; j <= 2; j++) {
        const nx = gx + i;
        const ny = gy + j;
        if (nx >= 0 && ny >= 0 && nx < cols && ny < rows) {
          const neighbor = grid[nx + ny * cols];
          if (neighbor) {
            const dx = neighbor.x - p.x;
            const dy = neighbor.y - p.y;
            if (dx * dx + dy * dy < r * r) return true;
          }
        }
      }
    }
    return false;
  }


  align_letters(width, height);

  const combined = good_letters.concat(bad_letters);
  for(let shape of combined){
    for(let point of shape){
      const temp = {x: point[0], y: point[1]}
      samples.push(temp)
      active.push(temp);
      grid[gridIndex(temp)] = temp;
    }
  }  

  while (active.length > 0) {
    const idx = Math.floor(Math.random() * active.length);
    const a = active[idx]; // pick random active node
    let placed = false;
    for (let i = 0; i < k; i++) {
      const ang = Math.random() * Math.PI * 2;
      const rad = r + Math.random() * r;
      const cand = { x: a.x + Math.cos(ang) * rad, y: a.y + Math.sin(ang) * rad };
      if (!inRange(cand)) continue;
      if (!tooClose(cand) && valid_point(cand)) {
        samples.push(cand);
        active.push(cand);
        grid[gridIndex(cand)] = cand;
        placed = true;
      }
    }
    if (!placed){
      active.splice(idx, 1);
    } 
  }
  return samples;
}

export { good_letters };